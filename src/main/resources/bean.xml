<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

<!--    控制反转，把对象交给spring管理-->
<!--    spring对bean的管理细节
        1. 创建bean的三种方式
        2. bean对象的作用范围
        3. bean对象的声明周期
-->
<!--    创建bean的三种方式-->
<!--    第一种方式，使用默认构造函数创建。在spring配置文件中使用bean标签配以id和class属性后，没有其他属性和标签时，没有默认构造函数则创建失败-->
<!--    <bean id="accountService" class="com.chanx.examples.service.impl.AccountServiceImpl"></bean>-->
<!--    <bean id="accountDao" class="com.chanx.examples.dao.impl.AccountDaoImpl"></bean>-->

<!--    第二种方式，使用普通工厂中的方法创建对象（使用某个类中的方法创建对象并存入spring容器）-->
<!--    <bean id="instanceFactory" class="com.chanx.examples.factory.InstanceFactory"></bean>-->
<!--    <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>-->

<!--    第三种的方式，使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）-->
<!--    <bean id="accountService" class="com.chanx.examples.factory.InstanceFactory" factory-method="getAccountService"></bean>-->

<!--    bean的作用范围调整
            bean标签scope属性，用于指定bean的作用范围
            取值：
                singleton: 单例（默认值）。
                prototype: 多例。
                request: 作用于web应用的请求范围。
                session: 作用于web应用的会话范围。
                global-session: 作用于集群环境的会话范围(全局范围)，当不是集群环境是，session。
-->
<!--    <bean id="accountService" class="com.chanx.examples.factory.InstanceFactory" factory-method="getAccountService" scope="singleton"></bean>-->

<!--    bean的生命周期
            单例
                创建：当容器创建时
                存在：与容器同周期
                死亡：容器销毁
            多例：
                创建：spring框架创建
                存在：对象使用过程中
                死亡：对象调用close方法或被gc时
-->
<!--    <bean id="accountService" class="com.chanx.examples.service.impl.AccountServiceImpl" scope="singleton" init-method="init" destroy-method="destroy"></bean>-->
<!--    <bean id="accountService" class="com.chanx.examples.service.impl.AccountServiceImpl" scope="prototype" init-method="init" destroy-method="destroy"></bean>-->

<!--    spring中的依赖注入-->
<!--        依赖注入：-->
<!--            Dependency Injection-->
<!--        IOC作用：-->
<!--            降低程序键耦合（依赖关系）-->
<!--    依赖关系以后都交给spring来维护,当前类需要用到其他类的对象,由spring来为我们提供,在配置文件中说明-->
<!--    依赖关系的维护,称之为依赖注入-->
<!--    有三类:基本类型和String,其他bean类型,复杂类型/集合类型
            注入方式:
                第一种,使用构造函数
                第二种,使用set方法
                第三种,使用注解
-->
<!--    使用构造方法注入:
            使用constructor-arg注入
            标签出现的位置:bean标签内部
            标签中的属性
                type:用于指定要注入的数据类型,该数据类型也是构造函数中某个或某些函数的类型
                index:用于指定要注入的数据给构造函数中指定索引位置的参数赋值.参数索引的位置是从0开始
                name:用于指定给构造函数中指定名称的参数赋值.(常用)
                ===================以上三个用于给构造函数中哪个函数赋值=====================
                value：用于给基本类型和String类型赋值
                ref：用于指定其他的Bean类型数据。即springIOC核心容器中出现过的bean对象。
        优势：
            在获取bean对象时，注入必须是必须的操作，否则对象无法创建成功。
        弊端：
            改变了bean对象的实例化方式，使我们在创建对象时如果用不到这些数据，也必须提供。
-->
<!--    配置一个日期对象-->
<!--    <bean id="now" class="java.util.Date"></bean>-->
<!--    <bean id="accountService" class="com.chanx.examples.service.impl.AccountServiceImpl" >-->
<!--        <constructor-arg name="name" value="泰斯特"></constructor-arg>-->
<!--        <constructor-arg name="age" value="18"></constructor-arg>-->
<!--        <constructor-arg name="birthday" ref="now"></constructor-arg>-->
<!--    </bean>-->

<!--    set方法注入：更常用的方式。
            涉及的标签：property
            出现的位置：bean标签的内部
            标签的属性：
                name:用于指定注入时调用的set方法名称.(常用)
                value：用于给基本类型和String类型赋值
                ref：用于指定其他的Bean类型数据。即springIOC核心容器中出现过的bean对象。
        优势：
            创建对象没有明确的限制，可以直接用默认构造函数。
        弊端：
            如果某个成员必须有值，则获取set方法无法保证一定注入。
-->
<!--    <bean id="now" class="java.util.Date"></bean>-->
<!--    <bean id="accountService" class="com.chanx.examples.service.impl.AccountServiceImpl1" >-->
<!--        <property name="name" value="泰瑟特"></property>-->
<!--        <property name="age" value="20"></property>-->
<!--        <property name="birthday" ref="now"></property>-->
<!--    </bean>-->
<!--    复杂类型的注入/集合类型的注入
            用于给list集合注入的标签：
                list array set
            用于给map集合注入的标签：
                map props
            结构相同，标签可以互换
-->
<!--    <bean id="accountService" class="com.chanx.examples.service.impl.AccountServiceImpl2" >-->
<!--        <property name="myStrs">-->
<!--            <array>-->
<!--                <value>AAA</value>-->
<!--                <value>AAA</value>-->
<!--                <value>AAA</value>-->
<!--            </array>-->
<!--        </property>-->
<!--        <property name="myMap">-->
<!--            <map>-->
<!--                <entry key="1" value="AAA"></entry>-->
<!--            </map>-->
<!--        </property>-->
<!--    </bean>-->

<!--    通知spring在创建容器时要扫描的包，配置所需要的标签不是在beans的约束中，而是一个名称为context名称空间和约束中-->
    <context:component-scan base-package="com.chanx"></context:component-scan>
</beans>
